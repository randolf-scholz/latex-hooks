# Custom hooks for pre-commit.

# region pygrep ------------------------------------------------------------------------
# NOTE: This regex checks comments begin with a `#`, `%`, `//` (padded to length 2)
#   The first group is 0-82 or 84-unlimited characters
#   The construction `([-=—─═])\2{2}` checks for a separator character repeated 3 times
#   If the first group matches ≥84 characters, then the line is overlong (2+84+3=89 characters)
#   If it matches ≤82 characters, then the line is too short, given that it is detected as a separator.
#   (2 + 83 characters + separator + separator + separator = 88 characters)
# NOTE: The second group is a separator character, we consider the characters:
# `-` (U+002D: Hyphen-Minus)
# `=` (U+003D: Equals Sign)
# `—` (U+2014: Em Dash)
# `═` (U+2550: Box Drawings Double Horizontal)
# `─` (U+2500: Box Drawings Light Horizontal)
- id: check-separator-length-80
  name: '[text] Check separator length is 80.'
  description: "Check that “horizontal rule” comments are the right length (80)."
  language: pygrep
  entry: '^(\#.|\%.|\/\/)(.{59,69}|.{71})([-=\\u2500-\\u257F])\3{7}$'
- id: check-separator-length-88
  name: '[text] Check separator length is 88.'
  description: "Check that “horizontal rule” comments are the right length (88)."
  entry: '^(\#.|\%.|\/\/)(.{59,77}|.{79,})([-=\\u2500-\\u257F])\3{7}$'
  language: pygrep
  types: [text]
- id: check-separator-length-100
  name: '[text] Check separator length is 100.'
  description: "Check that “horizontal rule” comments are the right length (100)."
  language: pygrep
  entry: '^(\#.|\%.|\/\/)(.{59,89}|.{91})([-=\\u2500-\\u257F])\3{7}$'
- id: check-separator-length-120
  name: '[text] Check separator length is 120.'
  description: "Check that “horizontal rule” comments are the right length (120)."
  language: pygrep
  entry: '^(\#.|\%.|\/\/)(.{59,109}|.{111})([-=\\u2500-\\u257F])\3{7}$'
# endregion pygrep ---------------------------------------------------------------------

# region latex -------------------------------------------------------------------------
- id: chktex
  name: chktex
  language: system
  types: [tex]
  description: "ChkTeX, a LaTeX semantic checker."
  entry: "chktex --format='%f:%l:%c %m [%k %n]\n' --quiet"
  require_serial: true # Otherwise, we get lot's of warning about failed regex compilations
  args: # default configuration
    - "--erroron=all"
    - "--nowarn=1" # Command terminated with space.
    - "--nowarn=3" # Enclose previous parentheses with `{}`.
    - "--nowarn=9" # ‘%s’ expected, found ‘%s’.
    - "--nowarn=17" # Number of ‘character’ doesn't match the number of ‘character’.
    - "--nowarn=19" # You should use `’` (ASCII 39) instead of `’` (ASCII 180).
    - "--nowarn=21" # This command might not be intended.
    - "--nowarn=22" # Comment displayed.
    - "--nowarn=30" # Multiple spaces detected in output.
    - "--nowarn=46" # Use `\(...\)` instead of `$...$`.
- id: lacheck
  name: lacheck
  description: "A consistency checker for LaTeX documents."
  pass_filenames: true
  require_serial: true
  language: script
  types: [tex]
  files: '\.tex$' # skip .sty and .cls files
  entry: src/lacheck_wrapper.sh
# endregion latex ----------------------------------------------------------------------

# region latex-lint-modern -------------------------------------------------------------
- id: latex-avoid-def
  name: '[tex] Avoid usage of `\def`.'
  description: 'Use `\NewDocumentCommand` instead of `\def`.'
  entry: '(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)(\\def\s*)(\\(?!\d)\w*+(?!##|@))' # excludes \def\0 and \def\internal@command...
  language: pygrep
  types: [tex]
- id: latex-avoid-let
  name: '[tex] Avoid usage of `\let`.'
  description: 'Use `\NewCommandCopy` instead of `\let`.'
  language: pygrep
  entry: '(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)(\\let\s*)(\\(?!\d)\w*+(?!##|@))' # excludes \let\0 and \let\internal@command...
  types: [tex]
- id: latex-avoid-newcommand
  name: '[tex] Avoid usage of `\newcommand`.'
  description: 'Use `\NewDocumentCommand` instead of `\newcommand` or `\DeclareRobustCommand`.'
  language: pygrep
  entry: '(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)\\((new|renew|provide)command|DeclareRobustCommand)\b'
  types: [tex]
- id: latex-avoid-double-dollar
  name: '[tex] Avoid usage of `$$`.'
  description: 'Use `\[` and `\]` or an enviroment instead of `$$`.'
  language: pygrep
  types: [tex]
  entry: '(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)(\$\$)'
- id: latex-avoid-legacy-commands
  name: '[tex] Avoid legacy commands.'
  description: 'Avoid legacy commands.'
  types: [tex]
  language: pygrep
  entry:  '(?x)(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)
          \\(
              (bf|em|it|rm|sf|sl|tt)
              |centerline
              |over
              |sloppy
          )\b
          (?![^\n]*?%\x20+tex:\x20+ignore)'
- id: latex-avoid-legacy-environments
  name: '[tex] Avoid legacy environments.'
  description: 'Avoid legacy environments.'
  types: [tex]
  language: pygrep
  entry:  '(?x)(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)
          \\begin\{(
              appendix
              |eqnarray
          )\}
          (?![^\n]*?%\x20+tex:\x20+ignore)'
- id: latex-avoid-ifmmode
  name: '[tex] Avoid usage of `\ifmmode`.'
  description: 'Use `\TextOrMath` instead of `\ifmmode`.'
  entry: '(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)\\ifmmode\b'
  types: [tex]
  language: pygrep
- id: latex-avoid-legacy-options
  name: '[tex] Avoid usage of `\DeclareOption`.'
  description: 'Use `\DeclareKeys` instead of legacy options system (see usrguide/clsguide).'
  language: pygrep
  entry:  '(?x)(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)
          \\(
            DeclareOption
            |OptionNotUsed
            |ProcessOptions
            |ExecuteOptions
          )\b
          (?![^\n]*?%\x20+tex:\x20+ignore)'
- id: latex-avoid-legacy-packages
  name: '[tex] Avoid legacy packages.'
  description: 'Avoid legacy packages.'
  language: pygrep
  types: [tex]
  entry:  '(?x)(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)
          \\(usepackage|RequirePackage)
              \s*(\[[^\]]*\])?\s*\{
                  ((\w|-)+\s*,\s*)*(
                      a4
                      |a4wide
                      |ae
                      |algorithmic
                      |anysize
                      |backrefx
                      |bitfield
                      |caption2
                      |color
                      |csvtools
                      |datetime
                      |dinat
                      |doublespace
                      |dropping
                      |eledmac
                      |eps
                      |epsfig
                      |eqnarray
                      |euler
                      |eurotex
                      |fancyheadings
                      |filecontents
                      |fixltx2e
                      |floatfig
                      |german
                      |glossary
                      |graphics
                      |HA-prosper
                      |here
                      |hyper
                      |ifthen
                      |isolatin
                      |isolatin1
                      |letltxmacro
                      |mathpple
                      |mathptm
                      |ngerman
                      |nthm
                      |palatino
                      |pdfsync
                      |picinpar
                      |prosper
                      |ps4pdf
                      |psfig
                      |psfrag
                      |pslatex
                      |raggedr
                      |scrjura
                      |scrlettr
                      |scrpage
                      |scrpage2
                      |seminar
                      |sistyle
                      |siunit
                      |SIunits
                      |subfig
                      |subfigure
                      |t1enc
                      |tabu
                      |times
                      |tocstyle
                      |twoside
                      |txfonts
                      |ucs
                      |umlaut
                      |utopia
                      |vmargin
                      |xparse
                      |zefonts
                  )
              (\s*,\s*(\w|-)+)*
          \}
          (?![^\n]*?%\x20+tex:\x20+ignore)'
# endregion latex-lint-modern ----------------------------------------------------------


# region latex-lint-extra --------------------------------------------------------------
- id: latex-avoid-makeatletter
  name: '[tex] Avoid unnecessary `\makeatletter`.'
  description: 'Using `\makeatletter` is unnecessary inside `.sty` and `.cls` files.'
  language: pygrep
  types: [tex]
  files: '\.(sty|cls)$'
  entry: '(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)\\makeat(letter|other)\b'
- id: latex-avoid-manual-spacing
  name: '[tex] Avoid manual spacing commands.'
  description: "Checks for the presence of manual spacing commands."
  language: pygrep
  types: [tex]
  entry: '(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)\\[!,.:>;]'
- id: latex-avoid-text-superscript
  name: '[tex] Avoid usage of `x^\text{...}`.'
  description: 'Consider defining a command instead of `^\text{...}`.'
  language: pygrep
  types: [tex]
  entry: '(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)[\_\^]\{?\\text\{\S*\w\}|\\text\{\S*\w\}[\(\[\{\\]'
- id: latex-use-label-convention
  name: '[tex] Follow label convention "\label{<tag>:<name>}".'
  description: 'Checks if labels are of the form \label{<tag>:<name>} (no uppercase!).'
  language: pygrep
  types: [tex]
  entry: '(?P<commented>^[\t ]*+|^[\t ]*+[^%\n][^\n]*?)\\label\{(?![a-z]+:[a-z0-9_]+\})'
# endregion latex-lint-extra -----------------------------------------------------------
